/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.spark.sql

import java.util.{ List => JList, Map => JMap }

import scala.reflect.runtime.universe.TypeTag

import org.apache.spark.Logging

/**
 * Functions for registering user-defined functions. Use [[SQLContext.udf]] to access this.
 */
class UDFRegistration private[sql] (sqlContext: SQLContext) extends Logging {

  private val functionRegistry = sqlContext.functionRegistry

 
  // scalastyle:off

  /* register 0-22 were generated by this script

    (0 to 22).map { x =>
      val types = (1 to x).foldRight("RT")((i, s) => {s"A$i, $s"})
      val typeTags = (1 to x).map(i => s"A${i}: TypeTag").foldLeft("RT: TypeTag")(_ + ", " + _)
      println(s"""
        /**
         * Register a Scala closure of ${x} arguments as user-defined function (UDF).
         * @tparam RT return type of UDF.
         */
        def register[$typeTags](name: String, func: Function$x[$types]): UserDefinedFunction = {
          val dataType = ScalaReflection.schemaFor[RT].dataType
          def builder(e: Seq[Expression]) = ScalaUdf(func, dataType, e, name)
          functionRegistry.registerFunction(name, builder)
          UserDefinedFunction(func, dataType)
        }""")
    }

    (1 to 22).foreach { i =>
      val extTypeArgs = (1 to i).map(_ => "_").mkString(", ")
      val anyTypeArgs = (1 to i).map(_ => "Any").mkString(", ")
      val anyCast = s".asInstanceOf[UDF$i[$anyTypeArgs, Any]]"
      val anyParams = (1 to i).map(_ => "_: Any").mkString(", ")
      println(s"""
         |/**
         | * Register a user-defined function with ${i} arguments.
         | */
         |def register(name: String, f: UDF$i[$extTypeArgs, _], returnType: DataType) = {
         |  functionRegistry.registerFunction(
         |    name,
         |    (e: Seq[Expression]) => ScalaUdf(f$anyCast.call($anyParams), returnType, e, name))
         |}""".stripMargin)
    }
    */

}
